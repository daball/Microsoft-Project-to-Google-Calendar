<?xml version="1.0"?>

<project name="net.sf.mpxj" default="archive" basedir="..">

<target name="init" depends="init-props,init-dirs">
   <tstamp/>
</target>

<target name="init-props" description="Initialize properties">
   <tstamp/>
	
	<property name="current.version" value="4.1.0" />
	
   <!-- 
   	The following two properties are only required if you want to use the xjc target.
   	From experience, it is best to put the XSD file in the root MPXJ dir rather
   	than setting a full path here and in the binding.xjb file 
    -->
   <property name="mspdi.xsd" value="mspdi_pj14-correct.xsd"/>

   <property name="lib.dir" value="${basedir}/lib" />
   <property name="doc.dir" value="${basedir}/doc/api" />
   <property name="classes.dir" value="${basedir}/classes" />
   <property name="bak.dir" value="${basedir}/bak" />
   <property name="distribution" value="${basedir}/../mpxj-${current.version}.zip" />
   <property name="mspdi-schema.dir" value="/net/sf/mpxj/mspdi/schema" />
	<property name="planner-schema.dir" value="/net/sf/mpxj/planner/schema" />
	<property name="ikvm.dir" value="C:\java\ikvm-0.46.0.1" />
		
	<!-- 
		MPXJ is targeted at Java 1.6, so to ensure that the builds we distribute
		match this, we use this setting. 
	-->
	<property name="target-jvm-version" value="1.6" />
	
	<property name="poi.jar" value="poi-3.6-20091214" />
		
	<path id="poi.path">
		<pathelement location="${lib.dir}/${poi.jar}.jar"/>
	</path>

	<path id="junit.path">
		<pathelement location="${basedir}/junit/junit.jar"/>
	</path>
	
   <property name="poi.classpath" refid="poi.path" />
   <property name="junit.classpath" refid="junit.path" />

	<property name="poi.dll" value="${basedir}\lib.net\${poi.jar}.dll" />
	<property name="junit.dll" value="${basedir}\lib.net\junit.dll" />
	<property name="mpxj.dll" value="${basedir}\lib.net\mpxj.dll" />
	
	<property name="ikvmc.exe" value="${ikvm.dir}/bin/ikvmc.exe" />
	<available file="${ikvmc.exe}" property="ikvmc.exists"/>
</target>


<target name="init-dirs" depends="init-props" description="Initialize directories">
   <mkdir dir="${classes.dir}"/>
</target>

<target name="xjc" depends="init" description="Rebuild source generated by JAXB">
   <exec executable="xjc" dir="${basedir}">
	<arg line="-classpath ${classes.dir} -d ${basedir}/src -b ${basedir}/binding.xjb -p net.sf.mpxj.mspdi.schema ${mspdi.xsd}" />
   </exec>	
   <exec executable="xjc" dir="${basedir}">
	<arg line="-dtd -classpath ${classes.dir} -d ${basedir}/src -p net.sf.mpxj.planner.schema ${basedir}/doc/mrproject-0.6.dtd" />
   </exec>		
</target>

<target name="compile" depends="init" description="Compile Everything">
   <javac srcdir="${basedir}/src" destdir="${classes.dir}" classpath="${classpath}:${poi.classpath}:${junit.classpath}" debug="on" source="${target-jvm-version}" target="${target-jvm-version}">
      <!-- <compilerarg value="-Xlint"/> -->
   </javac>
</target>

<target name="document" depends="init-props" description="Generate documentation">
   <delete dir="${doc.dir}"/>
   <mkdir dir="${doc.dir}"/>
   <javadoc 
	sourcepath="${basedir}/src"
	classpath="${classpath}:${poi.classpath}:${junit.classpath}"
      packagenames="net.sf.mpxj.*"
      destdir="${doc.dir}"
      verbose="no"
      access="public">
   </javadoc>
</target>

<target name="jar" depends="compile" description="Create JAR files">
   <jar jarfile="${basedir}/mpxj.jar" basedir="${classes.dir}"/>
</target>

<target name="dll" depends="compile" description="Build .net DLLs" if="ikvmc.exists">	
   <exec executable="${ikvmc.exe}" dir="${basedir}">
	<arg line="-nowarn:0111 -nowarn:0100 -nowarn:0003 -out:${poi.dll} -target:library -keyfile:${basedir}\mpxj.snk -version:${current.version}.0 ${basedir}\lib\${poi.jar}.jar" />
   </exec>	
	
   <exec executable="${ikvmc.exe}" dir="${basedir}">
	<arg line="-nowarn:0003 -out:${junit.dll} -target:library -keyfile:${basedir}\mpxj.snk -version:${current.version}.0 ${basedir}\junit\junit.jar" />
   </exec>	

   <exec executable="${ikvmc.exe}" dir="${basedir}">
	<arg line="-nowarn:0003 -out:${mpxj.dll} -target:library -keyfile:${basedir}\mpxj.snk -version:${current.version}.0 -reference:${basedir}\lib.net\${poi.jar}.dll -reference:${basedir}\lib.net\junit.dll ${basedir}\mpxj.jar" />
   </exec>	
</target>

<target name="archive" depends="jar,dll" description="Create library files">
   
</target>

<target name="distribute" depends="compile,archive,clean-classes,clean-dot-net" description="Create distribution">
   <zip zipfile="${distribution}">
      <zipfileset dir="${basedir}" prefix="mpxj" excludes="**/CVSROOT/*,**/CVS/*"/>
   </zip>
</target>

<target name="clean-temp" depends="init-props" description="Clean up temporary files">
   <delete dir="${bak.dir}"/>
   <delete>
      <fileset dir="${basedir}" includes="**/*~" defaultexcludes="no"/>
   </delete>
</target>

<target name="clean-classes" depends="init-props" description="Clean up class files">
   <delete dir="${classes.dir}"/>
</target>

<target name="clean-dot-net" depends="init-props" description="Clean up .net build files">
	<delete dir="${basedir}/src.net/bin"/>
	<delete dir="${basedir}/src.net/obj"/>
	<delete file="${basedir}/src.net/MpxjSample.suo"/>
</target>
	
<target name="clean" depends="init-props, clean-temp, clean-classes, clean-dot-net" description="Clean up all files">
   <delete file="${basedir}/mpxj.jar"/>
	<delete file="${mpxj.dll}"/>
	<delete file="${junit.dll}"/>
	<delete file="${poi.dll}"/>
   <delete dir="${doc.dir}"/>
</target>

<target name="coverage" depends="archive" description="Code coverage using Emma">	
	<property name="emma.dir" value="c:\java\emma-2.0.5312" />
		
	<path id="emmarun.path">
		<path refid="poi.path"/>
		<path refid="junit.path"/>
		<pathelement location="${basedir}/mpxj.jar"/>
	</path>
	
	<property name="emmarun.classpath" refid="emmarun.path"/>

	<property name="filter" value="-javax.*,-com.*,-org.*,-junit.*,-net.sf.mpxj.mspdi.schema.*"/>
	
   <exec executable="java" dir="${basedir}">
		<arg line="-Xms64m -Xmx512m -Dmpxj.junit.datadir=${basedir}/junit/data -cp ${emma.dir}/lib/emma.jar emmarun -cp ${emmarun.classpath} -r html -sp ${basedir}/src -ix ${filter} junit.textui.TestRunner net.sf.mpxj.junit.MPXJTest" />
   </exec>	
</target>
	
	
</project>
