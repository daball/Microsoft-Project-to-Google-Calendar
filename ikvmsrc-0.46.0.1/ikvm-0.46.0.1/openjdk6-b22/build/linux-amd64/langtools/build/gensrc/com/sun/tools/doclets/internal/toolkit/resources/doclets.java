package com.sun.tools.doclets.internal.toolkit.resources;

import java.util.ListResourceBundle;

public final class doclets extends java.util.ListResourceBundle {
    protected final Object[][] getContents() {
        return new Object[][] {
            { "doclet.All_Classes", "All Classes" },
            { "doclet.All_Implemented_Interfaces", "All Implemented Interfaces:" },
            { "doclet.All_Superinterfaces", "All Superinterfaces:" },
            { "doclet.All_classes_and_interfaces", "All classes and interfaces (except non-static nested types)" },
            { "doclet.AnnotationType", "Annotation Type" },
            { "doclet.AnnotationTypes", "Annotation Types" },
            { "doclet.Annotation_Type_Member_Detail", "Element Detail" },
            { "doclet.Annotation_Type_Optional_Member_Summary", "Optional Element Summary" },
            { "doclet.Annotation_Type_Required_Member_Summary", "Required Element Summary" },
            { "doclet.Annotation_Types_Summary", "Annotation Types Summary" },
            { "doclet.Author", "Author:" },
            { "doclet.Building_Index", "Building index for all the packages and classes..." },
            { "doclet.Building_Index_For_All_Classes", "Building index for all classes..." },
            { "doclet.Building_Tree", "Building tree for all the packages and classes..." },
            { "doclet.Class", "Class" },
            { "doclet.Class_0_extends_implements_serializable", "Class {0} extends {1} implements Serializable" },
            { "doclet.Class_0_implements_serializable", "Class {0} implements Serializable" },
            { "doclet.Class_Summary", "Class Summary" },
            { "doclet.Classes", "Classes" },
            { "doclet.Constants_Summary", "Constant Field Values" },
            { "doclet.Constructor_Detail", "Constructor Detail" },
            { "doclet.Constructor_Summary", "Constructor Summary" },
            { "doclet.Copy_Overwrite_warning", "File {0} not copied to {1} due to existing file with same name..." },
            { "doclet.Copying_File_0_To_Dir_1", "Copying file {0} to directory {1}..." },
            { "doclet.Copying_File_0_To_File_1", "Copying file {0} to file {1}..." },
            { "doclet.Default", "Default:" },
            { "doclet.Deprecated", "Deprecated." },
            { "doclet.Deprecated_class", "This class is deprecated." },
            { "doclet.Encoding_not_supported", "Encoding not supported: {0}" },
            { "doclet.Enum", "Enum" },
            { "doclet.Enum_Constant_Detail", "Enum Constant Detail" },
            { "doclet.Enum_Constant_Summary", "Enum Constant Summary" },
            { "doclet.Enum_Summary", "Enum Summary" },
            { "doclet.Enums", "Enums" },
            { "doclet.Error", "Error" },
            { "doclet.Error_Summary", "Error Summary" },
            { "doclet.Error_creating_tmp_file", "Error creating temporary file, using default platform encoding." },
            { "doclet.Error_invalid_custom_tag_argument", "Error - {0} is an invalid argument to the -tag option..." },
            { "doclet.Error_taglet_not_registered", "Error - Exception {0} thrown while trying to register Taglet {1}..." },
            { "doclet.Errors", "Errors" },
            { "doclet.Exception", "Exception" },
            { "doclet.Exception_Summary", "Exception Summary" },
            { "doclet.Exceptions", "Exceptions" },
            { "doclet.Externalizable", "Externalizable" },
            { "doclet.Factory", "Factory:" },
            { "doclet.Factory_Method_Summary", "Static Factory Method Summary" },
            { "doclet.Field_Detail", "Field Detail" },
            { "doclet.Field_Summary", "Field Summary" },
            { "doclet.Fields_Inherited_From_Class", "Fields inherited from class {0}" },
            { "doclet.Fields_Inherited_From_Interface", "Fields inherited from interface {0}" },
            { "doclet.File_not_found", "File not found: {0}" },
            { "doclet.Generating_0", "Generating {0}..." },
            { "doclet.Groupname_already_used", "In -group option, groupname already used: {0}" },
            { "doclet.Interface", "Interface" },
            { "doclet.Interface_Summary", "Interface Summary" },
            { "doclet.Interfaces", "Interfaces" },
            { "doclet.Members", "Members" },
            { "doclet.Method_Detail", "Method Detail" },
            { "doclet.Method_Summary", "Method Summary" },
            { "doclet.Methods_Inherited_From_Class", "Methods inherited from class {0}" },
            { "doclet.Methods_Inherited_From_Interface", "Methods inherited from interface {0}" },
            { "doclet.MissingSerialDataTag", "in class {0}, missing @serialData tag in method {1}." },
            { "doclet.MissingSerialTag", "in class {0}, missing @serial tag for default serializable field: {1}." },
            { "doclet.Nested_Class_Summary", "Nested Class Summary" },
            { "doclet.Nested_Classes_Interface_Inherited_From_Interface", "Nested classes/interfaces inherited from interface {0}" },
            { "doclet.Nested_Classes_Interfaces_Inherited_From_Class", "Nested classes/interfaces inherited from class {0}" },
            { "doclet.No_Public_Classes_To_Document", "No public or protected classes found to document." },
            { "doclet.Notice_taglet_conflict_warn", "Note: Custom tags that could override future standard tags: {0}. To avoid potential overrides, use at least one period character (.) in custom tag names." },
            { "doclet.Notice_taglet_overriden", "Note: Custom tags that override standard tags: {0}" },
            { "doclet.Notice_taglet_registered", "Registered Taglet {0} ..." },
            { "doclet.Notice_taglet_unseen", "Note: Custom tags that were not seen: {0}" },
            { "doclet.Option_conflict", "Option {0} conflicts with {1}" },
            { "doclet.Option_reuse", "Option reused: {0}" },
            { "doclet.Other_Packages", "Other Packages" },
            { "doclet.Package_Summary", "Package Summary" },
            { "doclet.Package_class_and_interface_descriptions", "Package, class and interface descriptions" },
            { "doclet.Package_private", "(package private)" },
            { "doclet.Packages", "Packages" },
            { "doclet.Parameters", "Parameters:" },
            { "doclet.Parameters_dup_warn", "Parameter \"{0}\" is documented more than once." },
            { "doclet.Parameters_warn", "@param argument \"{0}\" is not a parameter name." },
            { "doclet.Return_tag_on_void_method", "@return tag cannot be used in method with void return type." },
            { "doclet.Returns", "Returns:" },
            { "doclet.See", "See:" },
            { "doclet.See_Also", "See Also:" },
            { "doclet.SerialData", "Serial Data:" },
            { "doclet.Serializable", "Serializable" },
            { "doclet.Serializable_no_customization", "No readObject or writeObject method declared." },
            { "doclet.Serialized_Form", "Serialized Form" },
            { "doclet.Serialized_Form_class", "Serialization Overview" },
            { "doclet.Serialized_Form_fields", "Serialized Fields" },
            { "doclet.Serialized_Form_methods", "Serialization Methods" },
            { "doclet.Since", "Since:" },
            { "doclet.Throws", "Throws:" },
            { "doclet.Toolkit_Usage_Violation", "The Doclet Toolkit can only be used by {0}" },
            { "doclet.TypeParameters", "Type Parameters:" },
            { "doclet.Type_Parameters_dup_warn", "Type parameter \"{0}\" is documented more than once." },
            { "doclet.Type_Parameters_warn", "@param argument \"{0}\" is not a type parameter name." },
            { "doclet.Unable_to_create_directory_0", "Unable to create directory {0}" },
            { "doclet.UnknownTag", "{0} is an unknown tag." },
            { "doclet.UnknownTagLowercase", "{0} is an unknown tag -- same as a known tag except for case." },
            { "doclet.Version", "Version:" },
            { "doclet.annotationtype", "annotation type" },
            { "doclet.class", "class" },
            { "doclet.dest_dir_create", "Creating destination directory: \"{0}\"" },
            { "doclet.destination_directory_not_directory_0", "Destination directory is not a directory {0}" },
            { "doclet.destination_directory_not_found_0", "Destination directory not found {0}" },
            { "doclet.destination_directory_not_writable_0", "Destination directory not writable {0}" },
            { "doclet.enum", "enum" },
            { "doclet.enum_valueof_doc", "\nReturns the enum constant of this type with the specified name.\nThe string must match <I>exactly</I> an identifier used to declare an\nenum constant in this type.  (Extraneous whitespace characters are \nnot permitted.)\n\n@param name the name of the enum constant to be returned.\n@return the enum constant with the specified name\n@throws IllegalArgumentException if this enum type has no constant\nwith the specified name\n@throws NullPointerException if the argument is null" },
            { "doclet.enum_values_doc", "\nReturns an array containing the constants of this enum type, in\nthe order they are declared.  This method may be used to iterate\nover the constants as follows:\n<pre>\nfor ({0} c : {0}.values())\n&nbsp;   System.out.println(c);\n</pre>\n@return an array containing the constants of this enum type, in\nthe order they are declared" },
            { "doclet.error", "error" },
            { "doclet.exception", "exception" },
            { "doclet.exception_encountered", "{0} encountered \n\twhile attempting to create file: {1}" },
            { "doclet.extended_by", "extended by" },
            { "doclet.extends", "extends" },
            { "doclet.implements", "implementsdoclet.Same_package_name_used=Package name format used twice: {0}" },
            { "doclet.in", "{0} in {1}" },
            { "doclet.interface", "interface" },
            { "doclet.malformed_html_link_tag", "<a> tag is malformed:\n\"{0}\"" },
            { "doclet.noInheritedDoc", "@inheritDoc used but {0} does not override or implement any method." },
            { "doclet.perform_copy_exception_encountered", "{0} encountered while \nperforming copy." },
            { "doclet.sourcetab_warning", "The argument for -sourcetab must be an integer greater than 0." },
            { "doclet.tag_misuse", "Tag {0} cannot be used in {1} documentation.  It can only be used in the following types of documentation: {2}." },
            { "doclet.value_tag_invalid_constant", "@value tag (which references {0}) can only be used in constants." },
            { "doclet.value_tag_invalid_reference", "{0} (referenced by @value tag) is an unknown reference." },
        };
    }
}
